// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ticker_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ticker_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ticker_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ticker_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ticker_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ticker_5finfo_2eproto;
class TickerInfo;
struct TickerInfoDefaultTypeInternal;
extern TickerInfoDefaultTypeInternal _TickerInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TickerInfo* Arena::CreateMaybeMessage<::TickerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TickerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TickerInfo) */ {
 public:
  inline TickerInfo() : TickerInfo(nullptr) {}
  ~TickerInfo() override;
  explicit constexpr TickerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickerInfo(const TickerInfo& from);
  TickerInfo(TickerInfo&& from) noexcept
    : TickerInfo() {
    *this = ::std::move(from);
  }

  inline TickerInfo& operator=(const TickerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickerInfo& operator=(TickerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickerInfo* internal_default_instance() {
    return reinterpret_cast<const TickerInfo*>(
               &_TickerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TickerInfo& a, TickerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TickerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickerInfo* New() const final {
    return CreateMaybeMessage<TickerInfo>(nullptr);
  }

  TickerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickerInfo& from);
  void MergeFrom(const TickerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TickerInfo";
  }
  protected:
  explicit TickerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstIDFieldNumber = 1,
    kBestBidFieldNumber = 2,
    kBidSzFieldNumber = 3,
    kBestAskFieldNumber = 4,
    kAskSzFieldNumber = 5,
    kEventTsFieldNumber = 6,
    kUpdateIDFieldNumber = 7,
  };
  // string instID = 1;
  void clear_instid();
  const std::string& instid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instid();
  std::string* release_instid();
  void set_allocated_instid(std::string* instid);
  private:
  const std::string& _internal_instid() const;
  void _internal_set_instid(const std::string& value);
  std::string* _internal_mutable_instid();
  public:

  // double bestBid = 2;
  void clear_bestbid();
  double bestbid() const;
  void set_bestbid(double value);
  private:
  double _internal_bestbid() const;
  void _internal_set_bestbid(double value);
  public:

  // double bidSz = 3;
  void clear_bidsz();
  double bidsz() const;
  void set_bidsz(double value);
  private:
  double _internal_bidsz() const;
  void _internal_set_bidsz(double value);
  public:

  // double bestAsk = 4;
  void clear_bestask();
  double bestask() const;
  void set_bestask(double value);
  private:
  double _internal_bestask() const;
  void _internal_set_bestask(double value);
  public:

  // double askSz = 5;
  void clear_asksz();
  double asksz() const;
  void set_asksz(double value);
  private:
  double _internal_asksz() const;
  void _internal_set_asksz(double value);
  public:

  // int64 eventTs = 6;
  void clear_eventts();
  ::PROTOBUF_NAMESPACE_ID::int64 eventts() const;
  void set_eventts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_eventts() const;
  void _internal_set_eventts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updateID = 7;
  void clear_updateid();
  ::PROTOBUF_NAMESPACE_ID::int64 updateid() const;
  void set_updateid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updateid() const;
  void _internal_set_updateid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TickerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
  double bestbid_;
  double bidsz_;
  double bestask_;
  double asksz_;
  ::PROTOBUF_NAMESPACE_ID::int64 eventts_;
  ::PROTOBUF_NAMESPACE_ID::int64 updateid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ticker_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TickerInfo

// string instID = 1;
inline void TickerInfo::clear_instid() {
  instid_.ClearToEmpty();
}
inline const std::string& TickerInfo::instid() const {
  // @@protoc_insertion_point(field_get:TickerInfo.instID)
  return _internal_instid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TickerInfo::set_instid(ArgT0&& arg0, ArgT... args) {
 
 instid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TickerInfo.instID)
}
inline std::string* TickerInfo::mutable_instid() {
  // @@protoc_insertion_point(field_mutable:TickerInfo.instID)
  return _internal_mutable_instid();
}
inline const std::string& TickerInfo::_internal_instid() const {
  return instid_.Get();
}
inline void TickerInfo::_internal_set_instid(const std::string& value) {
  
  instid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TickerInfo::_internal_mutable_instid() {
  
  return instid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TickerInfo::release_instid() {
  // @@protoc_insertion_point(field_release:TickerInfo.instID)
  return instid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TickerInfo::set_allocated_instid(std::string* instid) {
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TickerInfo.instID)
}

// double bestBid = 2;
inline void TickerInfo::clear_bestbid() {
  bestbid_ = 0;
}
inline double TickerInfo::_internal_bestbid() const {
  return bestbid_;
}
inline double TickerInfo::bestbid() const {
  // @@protoc_insertion_point(field_get:TickerInfo.bestBid)
  return _internal_bestbid();
}
inline void TickerInfo::_internal_set_bestbid(double value) {
  
  bestbid_ = value;
}
inline void TickerInfo::set_bestbid(double value) {
  _internal_set_bestbid(value);
  // @@protoc_insertion_point(field_set:TickerInfo.bestBid)
}

// double bidSz = 3;
inline void TickerInfo::clear_bidsz() {
  bidsz_ = 0;
}
inline double TickerInfo::_internal_bidsz() const {
  return bidsz_;
}
inline double TickerInfo::bidsz() const {
  // @@protoc_insertion_point(field_get:TickerInfo.bidSz)
  return _internal_bidsz();
}
inline void TickerInfo::_internal_set_bidsz(double value) {
  
  bidsz_ = value;
}
inline void TickerInfo::set_bidsz(double value) {
  _internal_set_bidsz(value);
  // @@protoc_insertion_point(field_set:TickerInfo.bidSz)
}

// double bestAsk = 4;
inline void TickerInfo::clear_bestask() {
  bestask_ = 0;
}
inline double TickerInfo::_internal_bestask() const {
  return bestask_;
}
inline double TickerInfo::bestask() const {
  // @@protoc_insertion_point(field_get:TickerInfo.bestAsk)
  return _internal_bestask();
}
inline void TickerInfo::_internal_set_bestask(double value) {
  
  bestask_ = value;
}
inline void TickerInfo::set_bestask(double value) {
  _internal_set_bestask(value);
  // @@protoc_insertion_point(field_set:TickerInfo.bestAsk)
}

// double askSz = 5;
inline void TickerInfo::clear_asksz() {
  asksz_ = 0;
}
inline double TickerInfo::_internal_asksz() const {
  return asksz_;
}
inline double TickerInfo::asksz() const {
  // @@protoc_insertion_point(field_get:TickerInfo.askSz)
  return _internal_asksz();
}
inline void TickerInfo::_internal_set_asksz(double value) {
  
  asksz_ = value;
}
inline void TickerInfo::set_asksz(double value) {
  _internal_set_asksz(value);
  // @@protoc_insertion_point(field_set:TickerInfo.askSz)
}

// int64 eventTs = 6;
inline void TickerInfo::clear_eventts() {
  eventts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TickerInfo::_internal_eventts() const {
  return eventts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TickerInfo::eventts() const {
  // @@protoc_insertion_point(field_get:TickerInfo.eventTs)
  return _internal_eventts();
}
inline void TickerInfo::_internal_set_eventts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  eventts_ = value;
}
inline void TickerInfo::set_eventts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_eventts(value);
  // @@protoc_insertion_point(field_set:TickerInfo.eventTs)
}

// int64 updateID = 7;
inline void TickerInfo::clear_updateid() {
  updateid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TickerInfo::_internal_updateid() const {
  return updateid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TickerInfo::updateid() const {
  // @@protoc_insertion_point(field_get:TickerInfo.updateID)
  return _internal_updateid();
}
inline void TickerInfo::_internal_set_updateid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updateid_ = value;
}
inline void TickerInfo::set_updateid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updateid(value);
  // @@protoc_insertion_point(field_set:TickerInfo.updateID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ticker_5finfo_2eproto
