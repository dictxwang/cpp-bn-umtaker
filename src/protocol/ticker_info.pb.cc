// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ticker_info.proto

#include "ticker_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr TickerInfo::TickerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bestbid_(0)
  , bidsz_(0)
  , bestask_(0)
  , asksz_(0)
  , eventts_(PROTOBUF_LONGLONG(0))
  , updateid_(PROTOBUF_LONGLONG(0)){}
struct TickerInfoDefaultTypeInternal {
  constexpr TickerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TickerInfoDefaultTypeInternal() {}
  union {
    TickerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TickerInfoDefaultTypeInternal _TickerInfo_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ticker_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ticker_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ticker_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ticker_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TickerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TickerInfo, instid_),
  PROTOBUF_FIELD_OFFSET(::TickerInfo, bestbid_),
  PROTOBUF_FIELD_OFFSET(::TickerInfo, bidsz_),
  PROTOBUF_FIELD_OFFSET(::TickerInfo, bestask_),
  PROTOBUF_FIELD_OFFSET(::TickerInfo, asksz_),
  PROTOBUF_FIELD_OFFSET(::TickerInfo, eventts_),
  PROTOBUF_FIELD_OFFSET(::TickerInfo, updateid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TickerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TickerInfo_default_instance_),
};

const char descriptor_table_protodef_ticker_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ticker_info.proto\"\177\n\nTickerInfo\022\016\n\006ins"
  "tID\030\001 \001(\t\022\017\n\007bestBid\030\002 \001(\001\022\r\n\005bidSz\030\003 \001("
  "\001\022\017\n\007bestAsk\030\004 \001(\001\022\r\n\005askSz\030\005 \001(\001\022\017\n\007eve"
  "ntTs\030\006 \001(\003\022\020\n\010updateID\030\007 \001(\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ticker_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ticker_5finfo_2eproto = {
  false, false, 156, descriptor_table_protodef_ticker_5finfo_2eproto, "ticker_info.proto", 
  &descriptor_table_ticker_5finfo_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_ticker_5finfo_2eproto::offsets,
  file_level_metadata_ticker_5finfo_2eproto, file_level_enum_descriptors_ticker_5finfo_2eproto, file_level_service_descriptors_ticker_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ticker_5finfo_2eproto_getter() {
  return &descriptor_table_ticker_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ticker_5finfo_2eproto(&descriptor_table_ticker_5finfo_2eproto);

// ===================================================================

class TickerInfo::_Internal {
 public:
};

TickerInfo::TickerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TickerInfo)
}
TickerInfo::TickerInfo(const TickerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instid().empty()) {
    instid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instid(), 
      GetArena());
  }
  ::memcpy(&bestbid_, &from.bestbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&updateid_) -
    reinterpret_cast<char*>(&bestbid_)) + sizeof(updateid_));
  // @@protoc_insertion_point(copy_constructor:TickerInfo)
}

void TickerInfo::SharedCtor() {
instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bestbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updateid_) -
    reinterpret_cast<char*>(&bestbid_)) + sizeof(updateid_));
}

TickerInfo::~TickerInfo() {
  // @@protoc_insertion_point(destructor:TickerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TickerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TickerInfo::ArenaDtor(void* object) {
  TickerInfo* _this = reinterpret_cast< TickerInfo* >(object);
  (void)_this;
}
void TickerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TickerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TickerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TickerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instid_.ClearToEmpty();
  ::memset(&bestbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateid_) -
      reinterpret_cast<char*>(&bestbid_)) + sizeof(updateid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TickerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TickerInfo.instID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bestBid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          bestbid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bidSz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          bidsz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bestAsk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          bestask_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double askSz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          asksz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 eventTs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          eventts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updateID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          updateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TickerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TickerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instID = 1;
  if (this->instid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instid().data(), static_cast<int>(this->_internal_instid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TickerInfo.instID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instid(), target);
  }

  // double bestBid = 2;
  if (!(this->bestbid() <= 0 && this->bestbid() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_bestbid(), target);
  }

  // double bidSz = 3;
  if (!(this->bidsz() <= 0 && this->bidsz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bidsz(), target);
  }

  // double bestAsk = 4;
  if (!(this->bestask() <= 0 && this->bestask() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_bestask(), target);
  }

  // double askSz = 5;
  if (!(this->asksz() <= 0 && this->asksz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_asksz(), target);
  }

  // int64 eventTs = 6;
  if (this->eventts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_eventts(), target);
  }

  // int64 updateID = 7;
  if (this->updateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_updateid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TickerInfo)
  return target;
}

size_t TickerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TickerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instID = 1;
  if (this->instid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instid());
  }

  // double bestBid = 2;
  if (!(this->bestbid() <= 0 && this->bestbid() >= 0)) {
    total_size += 1 + 8;
  }

  // double bidSz = 3;
  if (!(this->bidsz() <= 0 && this->bidsz() >= 0)) {
    total_size += 1 + 8;
  }

  // double bestAsk = 4;
  if (!(this->bestask() <= 0 && this->bestask() >= 0)) {
    total_size += 1 + 8;
  }

  // double askSz = 5;
  if (!(this->asksz() <= 0 && this->asksz() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 eventTs = 6;
  if (this->eventts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_eventts());
  }

  // int64 updateID = 7;
  if (this->updateid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updateid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TickerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TickerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TickerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TickerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TickerInfo)
    MergeFrom(*source);
  }
}

void TickerInfo::MergeFrom(const TickerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TickerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instid().size() > 0) {
    _internal_set_instid(from._internal_instid());
  }
  if (!(from.bestbid() <= 0 && from.bestbid() >= 0)) {
    _internal_set_bestbid(from._internal_bestbid());
  }
  if (!(from.bidsz() <= 0 && from.bidsz() >= 0)) {
    _internal_set_bidsz(from._internal_bidsz());
  }
  if (!(from.bestask() <= 0 && from.bestask() >= 0)) {
    _internal_set_bestask(from._internal_bestask());
  }
  if (!(from.asksz() <= 0 && from.asksz() >= 0)) {
    _internal_set_asksz(from._internal_asksz());
  }
  if (from.eventts() != 0) {
    _internal_set_eventts(from._internal_eventts());
  }
  if (from.updateid() != 0) {
    _internal_set_updateid(from._internal_updateid());
  }
}

void TickerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TickerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickerInfo::CopyFrom(const TickerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TickerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickerInfo::IsInitialized() const {
  return true;
}

void TickerInfo::InternalSwap(TickerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instid_.Swap(&other->instid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TickerInfo, updateid_)
      + sizeof(TickerInfo::updateid_)
      - PROTOBUF_FIELD_OFFSET(TickerInfo, bestbid_)>(
          reinterpret_cast<char*>(&bestbid_),
          reinterpret_cast<char*>(&other->bestbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TickerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ticker_5finfo_2eproto_getter, &descriptor_table_ticker_5finfo_2eproto_once,
      file_level_metadata_ticker_5finfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TickerInfo* Arena::CreateMaybeMessage< ::TickerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TickerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
